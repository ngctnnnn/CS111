@book{optimizedc++, author = {Guntheroth, Kurt}, title = {Optimized C++: Proven Techniques for Heightened Performance}, year = {2016}, isbn = {1491922060}, publisher = {O'Reilly Media, Inc.}, edition = {1st}, abstract = {In todays fast and competitive world, a programs performance is just as important to customers as the features it provides. This practical guide teaches developers performance-tuning principles that enable optimization in C++. Youll learn how to make code that already embodies best practices of C++ design run faster and consume fewer resources on any computerwhether its a watch, phone, workstation, supercomputer, or globe-spanning network of servers. Author Kurt Guntheroth provides several running examples that demonstrate how to apply these principles incrementally to improve existing code so it meets customer requirements for responsiveness and throughput. The advice in this book will prove itself the first time you hear a colleague exclaim, Wow, that was fast. Who fixed something? Locate performance hot spots using the profiler and software timers Learn to perform repeatable experiments to measure performance of code changes Optimize use of dynamically allocated variables Improve performance of hot loops and functions Speed up string handling functions Recognize efficient algorithms and optimization patterns Learn the strengthsand weaknessesof C++ container classes View searching and sorting through an optimizers eye Make efficient use of C++ streaming I/O functions Use C++ thread-based concurrency features effectively} }

@book{introductiontoalgorithm, author = {Cormen, Thomas H. and Leiserson, Charles E. and Rivest, Ronald L. and Stein, Clifford}, title = {Introduction to Algorithms, Third Edition}, year = {2009}, isbn = {0262033844}, publisher = {The MIT Press}, edition = {3rd}, abstract = {If you had to buy just one text on algorithms, Introduction to Algorithms is a magnificent choice. The book begins by considering the mathematical foundations of the analysis of algorithms and maintains this mathematical rigor throughout the work. The tools developed in these opening sections are then applied to sorting, data structures, graphs, and a variety of selected algorithms including computational geometry, string algorithms, parallel models of computation, fast Fourier transforms (FFTs), and more. This book's strength lies in its encyclopedic range, clear exposition, and powerful analysis. Pseudo-code explanation of the algorithms coupled with proof of their accuracy makes this book is a great resource on the basic tools used to analyze the performance of algorithms.} }
